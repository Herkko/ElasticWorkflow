package controllers

import play.api._
import play.api.mvc._
import anorm.NotAssigned
import java.util.Date

import models.{ Model, Process, Relation }

import app.actions.CORSAction
/**
 * Control all actions related to showing, creating and deleting models.
 *
 */
object Models extends Controller {

  /**
   * Add new model to database. Model id is auto-generated by Anorm. Model is automatically assigned one process,
   */
  def create = CORSAction { implicit request =>
    val modelId = Model.create(new Model(NotAssigned, "Model", "2012-11-15"))
    Processes.createNewProcess(modelId)
    Redirect(routes.Models.read(modelId.toInt))
  }

  def read(id: Long) = Action { implicit request =>
    println("we have " + Process.countByModel(id) + " processes")
    Model.read(id) match {
      case Some(model) => Ok(views.html.modelTest.details(model, Process.findByModelWithElements(id), Relation.findByModel(id)))
      case None => NotFound("This Model doesn't exist. Thrown by: " + getClass.getName + " when reading model from database.")
    }
  }

  def update(id: Int, name: String) = Action {
    Model.read(id) match {
      case Some(model) => {
        Model.update(id, name)
        Redirect(routes.Models.read(id))
      }
      case None => NotFound("This Model doesn't exist. Thrown by: " + getClass.getName + " when updating model.")
    }
  }

  //Not finished
  def delete(id: Long) = Action { implicit request =>
    Model.read(id) match {
      case Some(model) => {
        //actually delete model < to be ADDED modelService.delete(id)
        Redirect(routes.Models.list)
      }
      case None => NotFound("This Model doesn't exist. Thrown by: " + getClass.getName + " when deleting model.")
    }
  }

  /**
   * List all the models from database
   */
  def list = Action { implicit request =>
    Ok(views.html.modelTest.list(Model.list))
  }
}