package controllers

import play.api._
import play.api.mvc._
import service.{ ModelService, RelationService, ProcessService }

/**
 * Control all actions related to showing, creating and deleting models.
 *
 */
object Models extends Controller {

  val processService = new ProcessService
  val relationService = new RelationService
  val modelService = new ModelService

  /**
   * Add new model to database. Model id is auto-generated by Anorm. Model is automatically assigned one process,
   */
  def create = Action { implicit request =>
    val model = modelService.create();
    Redirect(routes.Processes.create(model))
  }

  /**
   *  data about model specified by parameter id. Data includes model itself, model processes
   * and their elements, model relations. Processes and elements are grouped in tuples, so that each tuple
   * consists of a process and a set of elements which belong to it.
   * If model with a given id doesn't exist, redirects to a page that lists all models.
   */
  def read(id: Int) = Action { implicit request =>
    if (modelService.exists(id)) {
      val model = modelService.read(id)
      val relations = relationService.findByModel(id)
      Ok(views.html.modelTest.details(model, processService.findByModelWithElements(id), relations))
    } else {
      Redirect(routes.Models.list())
    }
  }

  def delete(id: Int) = Action { implicit request =>
    Ok(views.html.modelTest.list(modelService.findAll))
  }

  /**
   * List all the models from database
   */
  def list = Action { implicit request =>
    Ok(views.html.modelTest.list(modelService.findAll))
  }

}