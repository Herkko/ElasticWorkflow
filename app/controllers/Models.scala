package controllers

import play.api._
import play.api.mvc._
import service.{ ModelService, RelationService, ProcessService }

/**
 * Control all actions related to showing, creating and deleting models.
 *
 */
object Models extends Controller {

  val processService = new ProcessService
  val relationService = new RelationService
  val modelService = new ModelService

  /**
   * Add new model to database. Model id is auto-generated by Anorm. Model is automatically assigned one process,
   */
  def create = Action { implicit request =>
    val modelId = modelService.create()
    Processes.createNewProcess(modelId)
    Redirect(routes.Models.read(modelId))
  }

  def read(id: Int) = Action { implicit request =>
    modelService.read(id) match {
      case Some(model) => Ok(views.html.modelTest.details(model, processService.findByModelWithElements(id), relationService.findByModel(id)))
      case None => NotFound("This Model doesn't exist. Thrown by: " + getClass.getName + " when reading model from database.")
    }
  }

  def update(id: Int, name: String) = Action {
    modelService.read(id) match {
      case Some(model) => {
        modelService.update(id, name)
        Redirect(routes.Models.read(id))
      }
      case None => NotFound("This Model doesn't exist. Thrown by: " + getClass.getName + " when updating model.")
    }
  }

  //Not finished
  def delete(id: Int) = Action { implicit request =>
    modelService.read(id) match {
      case Some(model) => {
        //actually delete model < to be ADDED modelService.delete(id)
         Redirect(routes.Models.list)
      }
      case None => NotFound("This Model doesn't exist. Thrown by: " + getClass.getName + " when deleting model.")
    }
  }

  /**
   * List all the models from database
   */
  def list = Action { implicit request =>
    Ok(views.html.modelTest.list(modelService.findAll))
  }
}