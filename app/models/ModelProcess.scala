package models

import play.api.Play.current
import play.api.db.DB
import anorm._
import anorm.SqlParser._

case class ModelProcess(id: Pk[Int], modelId: Int, processId: Int)

/**
 * Class that helps to specify relations between models and processes, i.e which processes belong to which models.
 */
object ModelProcess {

  val parse = {
    get[Pk[Int]]("id") ~
      get[Int]("modelId") ~
      get[Int]("processId")  map {
        case id ~ modelId ~ processId =>
          ModelProcess(id, modelId, processId)
      }
  }
  
  /**
   * Insert new 'relation' between models and processes to database and return id auto-generated by Anorm.
   */
  def create(id: Pk[Int], modelId: Int, processId: Int): Int = {
    DB.withConnection { implicit connection =>
      SQL("""insert into modelProcesses values ({id}, {modelId}, {processId})""").on(
        'id -> id,
        'modelId -> modelId,
        'processId -> processId).executeInsert()
    } match {
      case Some(pk) => {pk.intValue()}
      case None => throw new Exception("Model couldn't be added to database")
    }
  }
  
  
  /**
   * Delete modelProcess specified by parameter id. 
   */
  def delete(id: Int): Boolean = {
    DB.withConnection { implicit connection =>
      SQL("delete from modelProcesses where id = {id}").
        on('id -> id).executeUpdate() == 0
    }
  }
  
  /**
   * Delete all records in modelProcess that refer to a certain process. 
   */
  def deleteByProcess(id: Int): Boolean = {
    DB.withConnection { implicit connection =>
      SQL("""
          delete from modelProcesses
          where processId in (select id from processes where id = {id})""").
        on('id -> id).executeUpdate() == 0
    }
  }
  
}