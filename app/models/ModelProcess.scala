package models

import java.util.Date
import play.api.Play.current
import play.api.db.DB
import anorm._
import anorm.SqlParser._

case class ModelProcess(id: Pk[Int], modelId: Int, processId: Int, dateCreated: Date)

/**
 * Class that helps to specify relations between models and processes, i.e which processes belong to which models.
 */
object ModelProcess {

  val parse = {
    get[Pk[Int]]("id") ~
      get[Int]("modelId") ~
      get[Int]("processId") ~
      get[Date]("dateCreated") map {
        case id ~ modelId ~ processId ~ dateCreated =>
          ModelProcess(id, modelId, processId, dateCreated)
      }
  }
  
  /**
   * Insert new 'relation' between models and processes to database and return id auto-generated by Anorm.
   */
  def create(modelProcess: ModelProcess): Int = {
    DB.withConnection { implicit connection =>
      SQL("""insert into modelProcesses values ({id}, {modelId}, {processId}, {dateCreated})""").on(
        "id" -> modelProcess.id,
        "modelId" -> modelProcess.modelId,
        "processId" -> modelProcess.processId,
        "dateCreated" -> modelProcess.dateCreated).executeInsert()
    } match {
      case Some(long) => long.intValue()
      case None => throw new Exception("Model couldn't be added to database")
    }
  }
  
  
  /**
   * Delete modelProcess specified by parameter id. 
   */
  def delete(id: Int): Boolean = {
    DB.withConnection { implicit connection =>
      SQL("delete from modelProcesses where id = {id}").
        on('id -> id).executeUpdate() == 0
    }
  }
  
  /**
   * Delete all records in modelProcess that refer to a certain process. 
   */
  def deleteByProcess(id: Int): Boolean = {
    DB.withConnection { implicit connection =>
      SQL("""
          delete from modelProcesses
          where processId in (select id from processes where id = {id})""").
        on('id -> id).executeUpdate() == 0
    }
  }
  
}